{"version":3,"file":"static/js/275.1cd56d72.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/MovieSchedulePage/MovieSchedulePage.module.css?5983","webpack://my-app/./src/components/CalendarHeader/CalendarHeader.module.css?cadf","components/CalendarHeader/CalendarHeader.js","webpack://my-app/./src/components/DateScroller/DateScroller.module.css?90dc","components/DateScroller/DateScroller.js","webpack://my-app/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.js","pages/MovieSchedulePage/MovieSchedulePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MovieSchedulePage_container__Onn5G\",\"moviesList\":\"MovieSchedulePage_moviesList__ZglwV\",\"status\":\"MovieSchedulePage_status__PjM1S\",\"error\":\"MovieSchedulePage_error__qhENg\",\"noMovies\":\"MovieSchedulePage_noMovies__Iata5\"};","// extracted by mini-css-extract-plugin\nexport default {\"calendarHeader\":\"CalendarHeader_calendarHeader__vg1tF\",\"dateWrapper\":\"CalendarHeader_dateWrapper__IPIYT\",\"date\":\"CalendarHeader_date__rtHlY\",\"dayNumber\":\"CalendarHeader_dayNumber__4L4ci\",\"monthInfo\":\"CalendarHeader_monthInfo__qV+XX\",\"dayOfWeek\":\"CalendarHeader_dayOfWeek__cf-w1\",\"month\":\"CalendarHeader_month__11cfs\",\"todayTag\":\"CalendarHeader_todayTag__cNmJY\"};","import React from 'react';\r\nimport styles from './CalendarHeader.module.css';\r\n\r\nconst getDayOfWeek = (date) => {\r\n  const days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\r\n  return days[date.getDay()];\r\n};\r\n\r\nconst getMonthName = (date) => {\r\n  const months = ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'];\r\n  return months[date.getMonth()];\r\n};\r\n\r\nconst CalendarHeader = ({ date, isToday }) => {\r\n  return (\r\n    <div className={styles.calendarHeader}>\r\n      <div className={styles.dateWrapper}>\r\n        <div className={styles.date}>\r\n          <span className={styles.dayNumber}>{date.getDate()}</span>\r\n          <div className={styles.monthInfo}>\r\n            <span className={styles.dayOfWeek}>{getDayOfWeek(date)}</span>\r\n            <span className={styles.month}>{getMonthName(date)} {date.getFullYear()}</span>\r\n          </div>\r\n        </div>\r\n        {isToday && <div className={styles.todayTag}>Сегодня</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarHeader; ","// extracted by mini-css-extract-plugin\nexport default {\"scrollerContainer\":\"DateScroller_scrollerContainer__Ol3Sk\",\"dateItem\":\"DateScroller_dateItem__erJDJ\",\"dayLabel\":\"DateScroller_dayLabel__T+cDG\",\"dayNumber\":\"DateScroller_dayNumber__aK9o4\",\"selected\":\"DateScroller_selected__O+5gM\"};","import React, { useRef, useEffect } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from './DateScroller.module.css';\r\n\r\nconst DateScroller = ({ availableDates, selectedDate, onDateSelect }) => {\r\n  const scrollerRef = useRef(null);\r\n  const selectedRef = useRef(null);\r\n\r\n  // Прокрутка к выбранному элементу при монтировании или изменении selectedDate\r\n  useEffect(() => {\r\n    if (selectedRef.current && scrollerRef.current) {\r\n      const scroller = scrollerRef.current;\r\n      const selectedElement = selectedRef.current;\r\n      // Центрируем выбранный элемент\r\n      const scrollLeft = selectedElement.offsetLeft + selectedElement.offsetWidth / 2 - scroller.offsetWidth / 2;\r\n      scroller.scrollTo({ left: scrollLeft, behavior: 'smooth' });\r\n    }\r\n  }, [selectedDate]); // Зависимость от selectedDate\r\n\r\n  return (\r\n    <div className={styles.scrollerContainer} ref={scrollerRef}>\r\n      {availableDates.map((date, index) => {\r\n        const isSelected = date.toDateString() === selectedDate.toDateString();\r\n        return (\r\n          <div \r\n            key={index}\r\n            ref={isSelected ? selectedRef : null} // Добавляем ref для выбранного элемента\r\n            className={`${styles.dateItem} ${isSelected ? styles.selected : ''}`}\r\n            onClick={() => onDateSelect(date)}\r\n          >\r\n            {/* Отображаем день недели и число */}\r\n            <div className={styles.dayLabel}>{format(date, 'E', { locale: ru }).toUpperCase()}</div>\r\n            <div className={styles.dayNumber}>{format(date, 'd')}</div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateScroller; ","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"MovieCard_card__fwfKG\",\"fadeIn\":\"MovieCard_fadeIn__8rmgd\",\"movieInfo\":\"MovieCard_movieInfo__r3It6\",\"header\":\"MovieCard_header__wU19E\",\"title\":\"MovieCard_title__XetjX\",\"subtitle\":\"MovieCard_subtitle__ndSe8\",\"director\":\"MovieCard_director__ujd26\",\"alwaysVisibleDetails\":\"MovieCard_alwaysVisibleDetails__yDt1K\",\"optionsButton\":\"MovieCard_optionsButton__Z7wag\",\"details\":\"MovieCard_details__4fh9V\",\"detailItem\":\"MovieCard_detailItem__U-GUf\",\"theaterGroup\":\"MovieCard_theaterGroup__nAbi7\",\"theaterName\":\"MovieCard_theaterName__FA9LS\",\"showtimes\":\"MovieCard_showtimes__-UVTV\",\"showtimeChip\":\"MovieCard_showtimeChip__BvPw1\",\"expandableContent\":\"MovieCard_expandableContent__OR2eg\",\"expanded\":\"MovieCard_expanded__zvH9Q\",\"movieImage\":\"MovieCard_movieImage__LXYiS\",\"description\":\"MovieCard_description__eyWds\"};","import React from 'react';\r\nimport { FaMapMarkerAlt, FaClock, FaEllipsisV } from 'react-icons/fa';\r\nimport styles from './MovieCard.module.css';\r\n\r\n// Принимает объект фильма со сгруппированными сеансами, флаг isExpanded и обработчик onToggleExpand\r\nconst MovieCard = ({ movieGroup, isExpanded, onToggleExpand }) => {\r\n  // Добавляем проверку на случай, если movieGroup все же undefined\r\n  if (!movieGroup || !movieGroup.movieData || !movieGroup.theaters) {\r\n    // Можно вернуть null или какой-то placeholder/сообщение об ошибке\r\n    console.warn('MovieCard получил некорректные данные:', movieGroup);\r\n    return null; \r\n  }\r\n\r\n  const { movieData, theaters } = movieGroup;\r\n  const fullImageUrl = movieData.image ? `https://kinobrest.by${movieData.image}` : null;\r\n\r\n  return (\r\n    // Оборачиваем всю карточку в div с onClick для раскрытия\r\n    <div className={styles.card} onClick={() => onToggleExpand(movieData.title)}>\r\n      <div className={styles.movieInfo}>\r\n        {/* Верхняя часть (всегда видима) */}\r\n        <div className={styles.header}>\r\n          <h3 className={styles.title}>{movieData.title}</h3>\r\n          {/* Предотвращаем всплытие клика с кнопки опций до карточки */}\r\n          <button \r\n            className={styles.optionsButton} \r\n            aria-label=\"Опции\" \r\n            onClick={(e) => { e.stopPropagation(); alert('Опции для фильма ' + movieData.title); }}\r\n          >\r\n            <FaEllipsisV color={'#666'} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Детали, которые видны всегда */}\r\n        <div className={styles.alwaysVisibleDetails}>\r\n          {movieData.additional_info?.duration && (\r\n            <div className={styles.detailItem}> \r\n              <FaClock />\r\n              <span>{movieData.additional_info.duration}</span>\r\n            </div>\r\n          )}\r\n          {movieData.additional_info?.director && (\r\n            <p className={styles.director}> \r\n              Режиссер: {movieData.additional_info.director}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Раскрывающаяся часть */} \r\n        <div className={`${styles.expandableContent} ${isExpanded ? styles.expanded : ''}`}>\r\n          {fullImageUrl && (\r\n            <img src={fullImageUrl} alt={`Постер ${movieData.title}`} className={styles.movieImage} />\r\n          )}\r\n          {movieData.additional_info?.description && (\r\n            <p className={styles.description}>{movieData.additional_info.description}</p>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Список кинотеатров и сеансов (всегда видим) */} \r\n        <div className={styles.details}>\r\n          {theaters.map((theater) => (\r\n            <div key={theater.name} className={styles.theaterGroup}>\r\n              <div className={styles.theaterName}>\r\n                <FaMapMarkerAlt />\r\n                <span>{theater.name}</span>\r\n              </div>\r\n              <div className={styles.showtimes}>\r\n                {theater.showtimes.map((time) => (\r\n                  <span key={time} className={styles.showtimeChip}>{time}</span>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCard; ","import React, { useState, useEffect } from 'react';\r\nimport { format, addMinutes, differenceInMinutes, parseISO, parse, isValid } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from './MovieSchedulePage.module.css';\r\nimport CalendarHeader from '../../components/CalendarHeader/CalendarHeader';\r\nimport DateScroller from '../../components/DateScroller/DateScroller';\r\nimport MovieCard from '../../components/MovieCard/MovieCard';\r\n\r\n// --- Вспомогательные функции для дат ---\r\nconst russianMonths = [\r\n  'Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня',\r\n  'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'\r\n];\r\n\r\n// Форматируем дату в строку \"dd MMMM yyyy\" (на русском)\r\nconst formatDateRussian = (date) => {\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const month = russianMonths[date.getMonth()];\r\n  const year = date.getFullYear();\r\n  return `${day} ${month} ${year}`;\r\n};\r\n\r\n// Парсим строку \"dd MMMM yyyy\" (на русском) в Date\r\nconst parseDateRussian = (dateString) => {\r\n  const parts = dateString.split(' ');\r\n  if (parts.length !== 3) return null;\r\n\r\n  const day = parseInt(parts[0], 10);\r\n  const monthIndex = russianMonths.findIndex(m => m.toLowerCase() === parts[1].toLowerCase());\r\n  const year = parseInt(parts[2], 10);\r\n\r\n  if (isNaN(day) || monthIndex === -1 || isNaN(year)) return null;\r\n\r\n  const date = new Date(year, monthIndex, day);\r\n  // Проверяем, что дата валидна (например, 31 Февраля не пройдет)\r\n  return isValid(date) && date.getFullYear() === year && date.getMonth() === monthIndex && date.getDate() === day ? date : null;\r\n};\r\n\r\nconst MovieSchedulePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [availableDates, setAvailableDates] = useState(new Set()); // Оставляем Set для быстрой проверки в WeekDays (пока не заменили)\r\n  const [availableDateObjects, setAvailableDateObjects] = useState([]); // Массив объектов Date для нового скроллера\r\n  const [expandedMovieTitle, setExpandedMovieTitle] = useState(null); // Состояние для раскрытой карточки\r\n  \r\n  // Рассчитать конечное время фильма\r\n  const calculateEndTime = (startTime, duration) => {\r\n    if (!startTime || !duration) return null;\r\n    \r\n    // Извлекаем минуты из строки вроде \"90 мин.\"\r\n    const durationMatch = duration.match(/(\\d+)/);\r\n    if (!durationMatch) return null;\r\n    \r\n    const durationMinutes = parseInt(durationMatch[1], 10);\r\n    if (isNaN(durationMinutes)) return null;\r\n    \r\n    return addMinutes(startTime, durationMinutes);\r\n  };\r\n\r\n  // Загрузка данных о фильмах и извлечение дат\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch('https://test.akshome.by/test2/$movies.json');\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setMovies(data);\r\n        \r\n        // Извлекаем все доступные даты из show_times\r\n        const datesSet = new Set(); // Для проверки в старом WeekDays\r\n        const dateObjectsMap = new Map(); // Используем Map для уникальности Date объектов по YYYY-MM-DD\r\n        \r\n        data.forEach(movie => {\r\n          if (movie.additional_info?.show_times) {\r\n            Object.keys(movie.additional_info.show_times).forEach(dateString => {\r\n              const parsedDate = parseDateRussian(dateString);\r\n              if (parsedDate) {\r\n                const dateKey = format(parsedDate, 'yyyy-MM-dd');\r\n                datesSet.add(dateKey);\r\n                if (!dateObjectsMap.has(dateKey)) {\r\n                    dateObjectsMap.set(dateKey, parsedDate);\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n        \r\n        // Создаем отсортированный массив объектов Date\r\n        const sortedDateObjects = Array.from(dateObjectsMap.values()).sort((a, b) => a - b);\r\n        \r\n        setAvailableDates(datesSet); // Для обратной совместимости с WeekDays (временно)\r\n        setAvailableDateObjects(sortedDateObjects); // Для нового DateScroller\r\n        \r\n        // Устанавливаем selectedDate на первую доступную дату, если сегодня нет фильмов\r\n        const todayStr = format(new Date(), 'yyyy-MM-dd');\r\n        if (!datesSet.has(todayStr) && sortedDateObjects.length > 0) {\r\n          setSelectedDate(sortedDateObjects[0]); // Берем первую дату из отсортированного массива\r\n        } else {\r\n          // Если сегодня есть фильмы или нет доступных дат, оставляем сегодня\r\n          setSelectedDate(new Date());\r\n        }\r\n        \r\n      } catch (e) {\r\n        console.error(\"Failed to fetch movies:\", e);\r\n        setError(\"Не удалось загрузить расписание фильмов\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  // Фильтрация и группировка фильмов по выбранной дате\r\n  const getMoviesForSelectedDate = () => {\r\n    if (!movies || movies.length === 0) return [];\r\n    \r\n    const selectedDateString = formatDateRussian(selectedDate);\r\n    const groupedMovies = new Map(); // Используем Map для удобного добавления/обновления\r\n\r\n    movies.forEach(movie => {\r\n      if (!movie.additional_info?.show_times) return;\r\n      \r\n      const scheduleForDate = movie.additional_info.show_times[selectedDateString];\r\n      if (!scheduleForDate || !Array.isArray(scheduleForDate)) return;\r\n      \r\n      // Если для фильма есть сеансы на эту дату, добавляем/обновляем его в Map\r\n      if (!groupedMovies.has(movie.title)) {\r\n        // Если фильма еще нет в Map, создаем базовую запись\r\n        groupedMovies.set(movie.title, {\r\n          movieData: { ...movie }, // Копируем основные данные фильма\r\n          theaters: [] // Массив для кинотеатров и их сеансов\r\n        });\r\n      }\r\n      \r\n      const movieEntry = groupedMovies.get(movie.title);\r\n      \r\n      // Перебираем расписание по кинотеатрам для этого фильма на выбранную дату\r\n      scheduleForDate.forEach(theaterSchedule => {\r\n        const theaterName = theaterSchedule.theater || 'Кинотеатр';\r\n        let theaterEntry = movieEntry.theaters.find(t => t.name === theaterName);\r\n        \r\n        // Если такого кинотеатра еще нет для этого фильма, добавляем\r\n        if (!theaterEntry) {\r\n          theaterEntry = { name: theaterName, showtimes: [] };\r\n          movieEntry.theaters.push(theaterEntry);\r\n        }\r\n        \r\n        // Добавляем время сеансов для этого кинотеатра, избегая дубликатов времени\r\n        if (theaterSchedule.showtimes && Array.isArray(theaterSchedule.showtimes)) {\r\n          // Используем Set для автоматического удаления дубликатов времени сеансов\r\n          const currentShowtimes = new Set(theaterEntry.showtimes); \r\n          theaterSchedule.showtimes.forEach(timeString => {\r\n            const timeMatch = timeString.match(/(\\d{1,2}:\\d{2})/);\r\n            if (timeMatch) {\r\n              currentShowtimes.add(timeMatch[0]); // Добавляем время в Set\r\n            }\r\n          });\r\n          // Преобразуем Set обратно в отсортированный массив\r\n          theaterEntry.showtimes = Array.from(currentShowtimes).sort(); \r\n        }\r\n      });\r\n      \r\n      // Сортируем кинотеатры по имени\r\n      movieEntry.theaters.sort((a, b) => a.name.localeCompare(b.name));\r\n    });\r\n\r\n    // Преобразуем Map в массив и сортируем фильмы по названию\r\n    return Array.from(groupedMovies.values()).sort((a, b) => \r\n      a.movieData.title.localeCompare(b.movieData.title)\r\n    );\r\n  };\r\n\r\n  // Функция для переключения раскрытия карточки\r\n  const handleToggleExpand = (title) => {\r\n    setExpandedMovieTitle(prevTitle => (prevTitle === title ? null : title));\r\n  };\r\n\r\n  const filteredMovies = getMoviesForSelectedDate();\r\n  const isToday = selectedDate.toDateString() === new Date().toDateString();\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <CalendarHeader date={selectedDate} isToday={isToday} />\r\n      <DateScroller \r\n          selectedDate={selectedDate} \r\n          onDateSelect={(date) => { \r\n              setSelectedDate(date); \r\n              setExpandedMovieTitle(null); // Сбрасываем раскрытую карточку при смене даты\r\n          }} \r\n          availableDates={availableDateObjects}\r\n      />\r\n      \r\n      {loading && <p className={styles.status}>Загрузка расписания...</p>}\r\n      {error && <p className={styles.error}>{error}</p>}\r\n      \r\n      {!loading && !error && filteredMovies.length === 0 && (\r\n        <p className={styles.noMovies}>Нет фильмов на выбранную дату</p>\r\n      )}\r\n      \r\n      <div className={styles.moviesList}>\r\n        {filteredMovies.map((movieGroup, index) => (\r\n          movieGroup && movieGroup.movieData ? (\r\n            <MovieCard\r\n              key={`${movieGroup.movieData.title || 'movie'}-${index}`}\r\n              movieGroup={movieGroup}\r\n              isExpanded={movieGroup.movieData.title === expandedMovieTitle} // Передаем флаг раскрытия\r\n              onToggleExpand={handleToggleExpand} // Передаем обработчик\r\n            />\r\n          ) : null\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieSchedulePage; "],"names":["getDayOfWeek","date","getDay","getMonthName","getMonth","_ref","isToday","_jsx","className","styles","children","_jsxs","getDate","getFullYear","availableDates","selectedDate","onDateSelect","scrollerRef","useRef","selectedRef","useEffect","current","scroller","selectedElement","scrollLeft","offsetLeft","offsetWidth","scrollTo","left","behavior","ref","map","index","isSelected","toDateString","onClick","format","locale","ru","toUpperCase","_movieData$additional","_movieData$additional2","_movieData$additional3","movieGroup","isExpanded","onToggleExpand","movieData","theaters","console","warn","fullImageUrl","image","title","e","stopPropagation","alert","FaEllipsisV","color","additional_info","duration","FaClock","director","src","alt","description","theater","FaMapMarkerAlt","name","showtimes","time","russianMonths","MovieSchedulePage","movies","setMovies","useState","loading","setLoading","error","setError","setSelectedDate","Date","setAvailableDates","Set","availableDateObjects","setAvailableDateObjects","expandedMovieTitle","setExpandedMovieTitle","async","response","fetch","ok","Error","status","data","json","datesSet","dateObjectsMap","Map","forEach","movie","_movie$additional_inf","show_times","Object","keys","dateString","parsedDate","parts","split","length","day","parseInt","monthIndex","findIndex","m","toLowerCase","year","isNaN","isValid","parseDateRussian","dateKey","add","has","set","sortedDateObjects","Array","from","values","sort","a","b","todayStr","fetchMovies","handleToggleExpand","prevTitle","filteredMovies","getMoviesForSelectedDate","selectedDateString","String","padStart","groupedMovies","_movie$additional_inf2","scheduleForDate","isArray","movieEntry","get","theaterSchedule","theaterName","theaterEntry","find","t","push","currentShowtimes","timeString","timeMatch","match","localeCompare","CalendarHeader","DateScroller","MovieCard"],"sourceRoot":""}