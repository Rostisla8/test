{"version":3,"file":"static/js/951.82b923d8.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/HomePage/HomePage.module.css?5baa","webpack://my-app/./src/components/Header/Header.module.css?4e72","components/Header/Header.js","webpack://my-app/./src/components/SubjectCard/SubjectCard.module.css?9d87","components/SubjectCard/SubjectCard.js","webpack://my-app/./src/components/AddCurrencyCard/AddCurrencyCard.module.css?114d","components/AddCurrencyCard/AddCurrencyCard.js","webpack://my-app/./src/components/CurrencyModal/CurrencyModal.module.css?fa7d","components/CurrencyModal/CurrencyModal.js","webpack://my-app/./src/components/WeatherForecast/WeatherForecast.module.css?037f","webpack://my-app/./src/components/WeatherCard/WeatherCard.module.css?2d45","components/WeatherCard/WeatherCard.js","components/WeatherForecast/WeatherForecast.js","pages/HomePage/HomePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"homePage\":\"HomePage_homePage__cdGcG\",\"section\":\"HomePage_section__hKnXm\",\"sectionTitle\":\"HomePage_sectionTitle__On110\",\"sectionSubtitle\":\"HomePage_sectionSubtitle__gBmAo\",\"weatherSection\":\"HomePage_weatherSection__jdrjG\",\"subjectsGrid\":\"HomePage_subjectsGrid__Cp1YQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Header_header__JbTq5\",\"content\":\"Header_content__f+rm9\",\"searchButton\":\"Header_searchButton__G0dcv\"};","import React from 'react';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport styles from './Header.module.css';\r\n//testir\r\n// Позже можно добавить пропс для динамического заголовка, если нужно\r\nconst Header = () => {\r\n  return (\r\n    <div className={styles.header}>\r\n      {/* Фоновое изображение/градиент будет добавлено через CSS */}\r\n      <div className={styles.content}>\r\n        {/* Иконка поиска */}\r\n        <button className={styles.searchButton}>\r\n          <FaSearch size={18} color=\"#ffffff\" />\r\n        </button>\r\n        {/* Можно добавить другие элементы, если нужно */}\r\n        {/* Пример: Заголовок */}\r\n        {/* <h1 className={styles.title}>Discover</h1> */}\r\n      </div>\r\n      {/* Элемент для скругленного нижнего края, если нужно имитировать картинку */}\r\n      {/* <div className={styles.curve}></div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header; ","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"SubjectCard_card__kGBsq\",\"cardHeader\":\"SubjectCard_cardHeader__Fn9AS\",\"iconWrapper\":\"SubjectCard_iconWrapper__IatAL\",\"defaultIcon\":\"SubjectCard_defaultIcon__YAgLP\",\"menuButton\":\"SubjectCard_menuButton__VXp9i\",\"cardBody\":\"SubjectCard_cardBody__3Siyl\",\"title\":\"SubjectCard_title__aW22A\",\"rateText\":\"SubjectCard_rateText__nfRsV\"};","import React from 'react';\r\nimport styles from './SubjectCard.module.css';\r\nimport { FaEllipsisH } from 'react-icons/fa'; // Иконка троеточия\r\n\r\n// Принимаем пропсы: title, icon, color, rate и onRemove\r\nconst SubjectCard = ({ title, icon, color, rate, onRemove }) => {\r\n  return (\r\n    <div className={styles.card} style={{ backgroundColor: color }}>\r\n      <div className={styles.cardHeader}>\r\n        <div className={styles.iconWrapper}>\r\n          {/* Иконка валюты */}\r\n          {icon ? icon : <span className={styles.defaultIcon}>?</span>}\r\n        </div>\r\n        {/* Вызываем onRemove при клике */} \r\n        <button className={styles.menuButton} onClick={onRemove} title=\"Удалить карточку\">\r\n          <FaEllipsisH size={16} color=\"#ffffff\" />\r\n        </button>\r\n      </div>\r\n      <div className={styles.cardBody}>\r\n        <h3 className={styles.title}>{title}</h3>\r\n        {/* Отображаем курс, если он передан */} \r\n        {rate && <p className={styles.rateText}>{rate}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubjectCard; ","// extracted by mini-css-extract-plugin\nexport default {\"addCard\":\"AddCurrencyCard_addCard__sNPKP\"};","import React from 'react';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport styles from './AddCurrencyCard.module.css';\r\n\r\nconst AddCurrencyCard = ({ onClick }) => {\r\n  return (\r\n    <button className={styles.addCard} onClick={onClick} title=\"Добавить валюту\">\r\n      <FaPlus size={24} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddCurrencyCard; ","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"CurrencyModal_overlay__2r9Mc\",\"modal\":\"CurrencyModal_modal__0Sbbe\",\"closeButton\":\"CurrencyModal_closeButton__+PV7m\",\"searchInput\":\"CurrencyModal_searchInput__uhFNh\",\"currencyList\":\"CurrencyModal_currencyList__u0yfE\",\"noResults\":\"CurrencyModal_noResults__9W01i\",\"errorText\":\"CurrencyModal_errorText__Np+Zh\"};","import React, { useState, useMemo } from 'react';\r\nimport styles from './CurrencyModal.module.css';\r\nimport { FaTimes } from 'react-icons/fa';\r\n\r\nconst CurrencyModal = ({ \r\n  isOpen, \r\n  onClose, \r\n  onSelectCurrency, \r\n  availableCurrencies = [], // Список всех валют от API\r\n  displayedCurrencyIds = [], // ID валют, которые уже отображены\r\n  isLoading, \r\n  error \r\n}) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // Фильтруем валюты, исключая уже добавленные и по поиску\r\n  const filteredCurrencies = useMemo(() => {\r\n    return availableCurrencies\r\n      .filter(currency => \r\n        // Исключаем уже отображенные\r\n        !displayedCurrencyIds.includes(currency.Cur_ID) &&\r\n        // Фильтруем по названию или аббревиатуре (регистронезависимо)\r\n        (currency.Cur_Name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n         currency.Cur_Abbreviation.toLowerCase().includes(searchTerm.toLowerCase()))\r\n      )\r\n      // Сортируем по названию для удобства\r\n      .sort((a, b) => a.Cur_Name.localeCompare(b.Cur_Name));\r\n  }, [availableCurrencies, displayedCurrencyIds, searchTerm]);\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.overlay} onClick={onClose}> {/* Закрытие по клику на фон */} \r\n      <div className={styles.modal} onClick={(e) => e.stopPropagation()}> {/* Предотвращаем закрытие при клике внутри модалки */} \r\n        <button className={styles.closeButton} onClick={onClose} aria-label=\"Закрыть окно\">\r\n          <FaTimes />\r\n        </button>\r\n        <h2>Выбор валюты</h2>\r\n        \r\n        <input \r\n          type=\"text\"\r\n          placeholder=\"Поиск валюты...\"\r\n          className={styles.searchInput}\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n\r\n        {isLoading && <p>Загрузка валют...</p>}\r\n        {error && <p className={styles.errorText}>{error}</p>}\r\n        \r\n        {!isLoading && !error && (\r\n          <ul className={styles.currencyList}>\r\n            {filteredCurrencies.length > 0 ? (\r\n              filteredCurrencies.map((currency) => (\r\n                <li key={currency.Cur_ID} onClick={() => onSelectCurrency(currency)}>\r\n                  {currency.Cur_Name} ({currency.Cur_Abbreviation})\r\n                </li>\r\n              ))\r\n            ) : (\r\n              <li className={styles.noResults}>Валюты не найдены.</li>\r\n            )}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyModal; ","// extracted by mini-css-extract-plugin\nexport default {\"forecastContainer\":\"WeatherForecast_forecastContainer__qnBk2\"};","// extracted by mini-css-extract-plugin\nexport default {\"weatherCard\":\"WeatherCard_weatherCard__C+YQX\",\"periodLabel\":\"WeatherCard_periodLabel__PwH5d\",\"weatherIcon\":\"WeatherCard_weatherIcon__f6eT0\",\"temperature\":\"WeatherCard_temperature__HnKb+\",\"description\":\"WeatherCard_description__1O3my\"};","import React from 'react';\r\nimport styles from './WeatherCard.module.css';\r\n\r\n// Функция для получения URL иконки OpenWeatherMap\r\nconst getWeatherIconUrl = (iconCode) => {\r\n  return `https://openweathermap.org/img/wn/${iconCode}@2x.png`;\r\n};\r\n\r\n// Словарь для перевода описаний погоды\r\nconst translateWeatherDescription = (englishDescription) => {\r\n  const translations = {\r\n    'clear sky': 'ясно',\r\n    'few clouds': 'небольшая облачность',\r\n    'scattered clouds': 'переменная облачность',\r\n    'broken clouds': 'облачно с прояснениями',\r\n    'overcast clouds': 'облачно',\r\n    'light rain': 'небольшой дождь',\r\n    'moderate rain': 'умеренный дождь',\r\n    'heavy rain': 'сильный дождь',\r\n    'light snow': 'небольшой снег',\r\n    'moderate snow': 'умеренный снег',\r\n    'heavy snow': 'сильный снег',\r\n    'rain and snow': 'дождь со снегом',\r\n    'mist': 'туман',\r\n    'fog': 'туман',\r\n    'thunderstorm': 'гроза'\r\n    // Можно добавить другие описания по мере необходимости\r\n  };\r\n  \r\n  // Приводим строку к нижнему регистру для удобства поиска в словаре\r\n  const lowerCaseDesc = englishDescription.toLowerCase();\r\n  \r\n  // Возвращаем перевод или исходное описание, если перевод не найден\r\n  return translations[lowerCaseDesc] || englishDescription;\r\n};\r\n\r\n// Словарь для перевода названий периодов\r\nconst translatePeriodLabel = (label) => {\r\n  const translations = {\r\n    // Полные названия\r\n    'Today Day': 'Сегодня днем',\r\n    'Today Night': 'Сегодня вечером',\r\n    'Today Morning': 'Сегодня утром',\r\n    'Tomorrow Day': 'Завтра днем',\r\n    'Tomorrow Night': 'Завтра вечером',\r\n    'Tomorrow Morning': 'Завтра утром',\r\n    \r\n    // Сокращенные названия\r\n    'Tomorrow Mrn': 'Завтра утром',\r\n    'Tomorrow Ngt': 'Завтра вечером',\r\n    'Today Mrn': 'Сегодня утром',\r\n    'Today Ngt': 'Сегодня вечером'\r\n  };\r\n  \r\n  return translations[label] || label;\r\n};\r\n\r\nconst WeatherCard = ({ periodLabel, temperature, description, iconCode }) => {\r\n  // Переводим описание погоды и название периода\r\n  const translatedDescription = translateWeatherDescription(description || '');\r\n  const translatedPeriod = translatePeriodLabel(periodLabel);\r\n  \r\n  return (\r\n    <div className={styles.weatherCard}>\r\n      <p className={styles.periodLabel}>{translatedPeriod}</p>\r\n      {iconCode && (\r\n        <img \r\n          className={styles.weatherIcon}\r\n          src={getWeatherIconUrl(iconCode)}\r\n          alt={translatedDescription || 'Погода'}\r\n        />\r\n      )}\r\n      <p className={styles.temperature}>{temperature !== null ? `${Math.round(temperature)}°C` : '-'}</p>\r\n      <p className={styles.description}>{translatedDescription || ''}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard; ","import React from 'react';\r\nimport styles from './WeatherForecast.module.css';\r\nimport WeatherCard from '../WeatherCard/WeatherCard';\r\n\r\n// Принимает массив обработанных данных погоды\r\nconst WeatherForecast = ({ forecastData = [] }) => {\r\n  if (!forecastData || forecastData.length === 0) {\r\n    return <p>Данные о погоде недоступны.</p>; // Или индикатор загрузки\r\n  }\r\n\r\n  return (\r\n    <div className={styles.forecastContainer}>\r\n      {forecastData.map((period, index) => (\r\n        <WeatherCard \r\n          key={index} \r\n          periodLabel={period.label}\r\n          temperature={period.temp}\r\n          description={period.description}\r\n          iconCode={period.icon}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast; ","import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport styles from './HomePage.module.css';\r\nimport Header from '../../components/Header/Header';\r\nimport SubjectCard from '../../components/SubjectCard/SubjectCard';\r\nimport AddCurrencyCard from '../../components/AddCurrencyCard/AddCurrencyCard';\r\nimport CurrencyModal from '../../components/CurrencyModal/CurrencyModal';\r\nimport WeatherForecast from '../../components/WeatherForecast/WeatherForecast';\r\nimport { FaDollarSign, FaRubleSign, FaEuroSign, FaQuestionCircle, FaPoundSign, FaYenSign, FaWonSign, FaLiraSign } from 'react-icons/fa'; // Добавили еще иконок\r\nimport { SiTether } from \"react-icons/si\"; // Пример использования другой библиотеки иконок\r\nimport { isInTelegram, showMainButton, hideMainButton } from '../../services/telegramApi';\r\n\r\n\r\n// --- Определяем основные валюты, доступные для добавления ---\r\n// Включаем ID, код, название (для модального окна) и масштаб (для расчета курса)\r\nconst mainAvailableCurrencies = [\r\n  { Cur_ID: 431, Cur_Abbreviation: 'USD', Cur_Name: 'Доллар США', Cur_Scale: 1, icon: <FaDollarSign size={20} color=\"#fff\" /> },\r\n  { Cur_ID: 451, Cur_Abbreviation: 'EUR', Cur_Name: 'Евро', Cur_Scale: 1, icon: <FaEuroSign size={20} color=\"#fff\" /> },\r\n  { Cur_ID: 456, Cur_Abbreviation: 'RUB', Cur_Name: 'Российский рубль', Cur_Scale: 100, icon: <FaRubleSign size={20} color=\"#fff\" /> },\r\n  { Cur_ID: 452, Cur_Abbreviation: 'PLN', Cur_Name: 'Польский злотый', Cur_Scale: 10, icon: <FaQuestionCircle size={20} color=\"#fff\" /> }, // Нужно найти иконку злотого\r\n  { Cur_ID: 518, Cur_Abbreviation: 'CNY', Cur_Name: 'Китайский юань', Cur_Scale: 10, icon: <FaYenSign size={20} color=\"#fff\" /> }, // Используем иену как заглушку\r\n  { Cur_ID: 429, Cur_Abbreviation: 'GBP', Cur_Name: 'Фунт стерлингов', Cur_Scale: 1, icon: <FaPoundSign size={20} color=\"#fff\" /> },\r\n  { Cur_ID: 449, Cur_Abbreviation: 'UAH', Cur_Name: 'Гривна', Cur_Scale: 100, icon: <FaQuestionCircle size={20} color=\"#fff\" /> }, // Нужна иконка гривны\r\n  // Можно добавить еще: CHF (426), JPY (440, scale 100), KZT (462, scale 1000), CAD (448) и т.д.\r\n  // { Cur_ID: 462, Cur_Abbreviation: 'KZT', Cur_Name: 'Тенге', Cur_Scale: 1000, icon: <FaQuestionCircle size={20} color=\"#fff\" /> }, \r\n];\r\n\r\n// Начальные валюты (должны быть из списка mainAvailableCurrencies)\r\nconst initialCurrencies = mainAvailableCurrencies.filter(c => ['USD', 'RUB', 'EUR'].includes(c.Cur_Abbreviation))\r\n    .map(c => ({ id: c.Cur_ID, code: c.Cur_Abbreviation, rate: null, color: c.color || '#ccc', icon: c.icon, scale: c.Cur_Scale }));\r\n\r\n// Переназначаем цвета для начальных валют, если нужно\r\ninitialCurrencies.find(c => c.code === 'USD').color = '#F9A826';\r\ninitialCurrencies.find(c => c.code === 'RUB').color = '#5C6BC0';\r\ninitialCurrencies.find(c => c.code === 'EUR').color = '#4CAF50';\r\n\r\n\r\nconst MAX_CARDS = 6;\r\nconst colorPalette = ['#EF5350', '#AB47BC', '#26A69A', '#FF7043', '#78909C']; // Оставляем палитру для новых\r\n\r\n// --- Константы для погоды ---\r\nconst OPENWEATHER_API_KEY = '2d171b1ba6df8f45cb44e8d2cdbefaf7'; // <--- ЗАМЕНИТЕ НА ВАШ КЛЮЧ!\r\nconst BREST_LAT = 52.0976;\r\nconst BREST_LON = 23.7341;\r\n\r\n// --- Константы для кеширования ---\r\nconst WEATHER_CACHE_KEY = 'weatherData';\r\nconst RATES_CACHE_KEY = 'currencyRates';\r\nconst CACHE_DURATION = {\r\n  WEATHER: 60 * 60 * 1000, // 1 час для погоды\r\n  RATES: 3 * 60 * 60 * 1000 // 3 часа для курсов валют\r\n};\r\n\r\n// --- Функции для работы с кешем ---\r\nconst saveToCache = (key, data) => {\r\n  try {\r\n    const cacheItem = {\r\n      timestamp: Date.now(),\r\n      data: data\r\n    };\r\n    localStorage.setItem(key, JSON.stringify(cacheItem));\r\n  } catch (e) {\r\n    console.warn('Не удалось сохранить данные в кеш:', e);\r\n  }\r\n};\r\n\r\nconst getFromCache = (key, maxAge) => {\r\n  try {\r\n    const cachedData = localStorage.getItem(key);\r\n    if (!cachedData) return null;\r\n    \r\n    const cacheItem = JSON.parse(cachedData);\r\n    const now = Date.now();\r\n    \r\n    // Проверяем, не устарели ли данные\r\n    if (now - cacheItem.timestamp > maxAge) {\r\n      localStorage.removeItem(key); // Удаляем устаревшие данные\r\n      return null;\r\n    }\r\n    \r\n    return cacheItem.data;\r\n  } catch (e) {\r\n    console.warn('Ошибка при чтении из кеша:', e);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Функция для обработки данных погоды\r\nconst processWeatherData = (apiData) => {\r\n  if (!apiData || !apiData.list) return [];\r\n\r\n  const now = new Date();\r\n  const todayStr = now.toISOString().split('T')[0];\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(now.getDate() + 1);\r\n  const tomorrowStr = tomorrow.toISOString().split('T')[0];\r\n\r\n  const periods = {\r\n    todayMorning: { label: \"Сегодня утром\", range: [6, 12], date: todayStr, data: [] },\r\n    todayDay:     { label: \"Сегодня днем\", range: [12, 18], date: todayStr, data: [] },\r\n    todayNight:   { label: \"Сегодня вечером\", range: [18, 24], date: todayStr, data: [] },\r\n    tomorrowMorning: { label: \"Завтра утром\", range: [6, 12], date: tomorrowStr, data: [] },\r\n    tomorrowDay:     { label: \"Завтра днем\", range: [12, 18], date: tomorrowStr, data: [] },\r\n    tomorrowNight:   { label: \"Завтра вечером\", range: [18, 24], date: tomorrowStr, data: [] },\r\n  };\r\n\r\n  // Распределяем 3-часовые прогнозы по периодам\r\n  apiData.list.forEach(item => {\r\n    const itemDate = new Date(item.dt * 1000);\r\n    const itemDateStr = itemDate.toISOString().split('T')[0];\r\n    const itemHour = itemDate.getHours();\r\n\r\n    for (const key in periods) {\r\n      const period = periods[key];\r\n      if (itemDateStr === period.date && itemHour >= period.range[0] && itemHour < period.range[1]) {\r\n        period.data.push(item);\r\n        break; // Переходим к следующему элементу API\r\n      }\r\n    }\r\n  });\r\n\r\n  // Вычисляем средние/репрезентативные значения для каждого периода\r\n  const result = Object.values(periods).map(period => {\r\n    if (period.data.length === 0) return null; // Пропускаем пустые периоды\r\n\r\n    // Средняя температура\r\n    const avgTemp = period.data.reduce((sum, item) => sum + item.main.temp, 0) / period.data.length;\r\n    \r\n    // Репрезентативная погода (берем из середины периода или первый)\r\n    const representativeItem = period.data[Math.floor(period.data.length / 2)] || period.data[0];\r\n    const description = representativeItem.weather[0]?.description || 'N/A';\r\n    const icon = representativeItem.weather[0]?.icon || '01d'; // Иконка по умолчанию\r\n\r\n    return {\r\n      label: period.label,\r\n      temp: avgTemp,\r\n      description: description.charAt(0).toUpperCase() + description.slice(1), // С большой буквы\r\n      icon: icon,\r\n    };\r\n  }).filter(Boolean); // Убираем null (пустые периоды)\r\n\r\n  return result;\r\n};\r\n\r\nconst HomePage = () => {\r\n  const [displayedCurrencies, setDisplayedCurrencies] = useState(initialCurrencies);\r\n  const [loadingRates, setLoadingRates] = useState(true);\r\n  const [ratesError, setRatesError] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  // --- Состояния для погоды ---\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const [loadingWeather, setLoadingWeather] = useState(true);\r\n  const [weatherError, setWeatherError] = useState(null);\r\n  \r\n  // --- Состояние для Telegram ---\r\n  const [isTelegramApp, setIsTelegramApp] = useState(false);\r\n\r\n  // Проверяем, запущено ли приложение в Telegram\r\n  useEffect(() => {\r\n    const telegramAvailable = isInTelegram();\r\n    setIsTelegramApp(telegramAvailable);\r\n    \r\n    if (telegramAvailable) {\r\n      // Настраиваем и показываем основную кнопку при открытии домашней страницы\r\n      showMainButton('Добавить валюту', () => {\r\n        handleOpenModal();\r\n      });\r\n    }\r\n    \r\n    return () => {\r\n      // Скрываем кнопку при размонтировании компонента\r\n      if (telegramAvailable) {\r\n        hideMainButton();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // --- Загрузка курсов для ОТОБРАЖАЕМЫХ валют ---\r\n  const fetchRates = useCallback(async (currenciesToFetch) => {\r\n    if (!currenciesToFetch || currenciesToFetch.length === 0) {\r\n      setLoadingRates(false);\r\n      return;\r\n    }\r\n    setLoadingRates(true);\r\n    setRatesError(null);\r\n    \r\n    // Для тестирования в Telegram Mini App сразу устанавливаем тестовые значения\r\n    if (isInTelegram()) {\r\n      console.log('Telegram WebApp: Устанавливаем тестовые значения для курсов валют');\r\n      const testRates = {\r\n        431: { rate: '0.3789', scale: 1 }, // USD\r\n        451: { rate: '0.4123', scale: 1 }, // EUR\r\n        456: { rate: '0.0042', scale: 100 } // RUB\r\n      };\r\n      \r\n      setDisplayedCurrencies(prevCurrencies =>\r\n        prevCurrencies.map(currency => ({\r\n          ...currency,\r\n          rate: testRates[currency.id]?.rate || '0.0000'\r\n        }))\r\n      );\r\n      \r\n      setLoadingRates(false);\r\n      return;\r\n    }\r\n    \r\n    const idsToFetch = currenciesToFetch.map(c => c.id);\r\n\r\n    // Проверяем, какие валюты нам нужно получить с сервера, а какие можно взять из кеша\r\n    const cachedRatesData = getFromCache(RATES_CACHE_KEY, CACHE_DURATION.RATES) || {};\r\n    const idsToFetchFromApi = [];\r\n    \r\n    // Помечаем, какие валюты нам нужно получить с сервера\r\n    idsToFetch.forEach(id => {\r\n      if (!cachedRatesData[id] || !cachedRatesData[id].rate) {\r\n        idsToFetchFromApi.push(id);\r\n      }\r\n    });\r\n    \r\n    // Если есть валюты в кеше, обновляем их сразу\r\n    if (Object.keys(cachedRatesData).length > 0) {\r\n      setDisplayedCurrencies(prevCurrencies =>\r\n        prevCurrencies.map(currency => {\r\n          if (cachedRatesData[currency.id] && cachedRatesData[currency.id].rate) {\r\n            return {\r\n              ...currency,\r\n              rate: cachedRatesData[currency.id].rate\r\n            };\r\n          }\r\n          return currency;\r\n        })\r\n      );\r\n    }\r\n    \r\n    // Если все валюты в кеше, завершаем\r\n    if (idsToFetchFromApi.length === 0) {\r\n      console.log('Все курсы валют загружены из кеша');\r\n      setLoadingRates(false);\r\n      return;\r\n    }\r\n    \r\n    // Иначе запрашиваем только недостающие валюты\r\n    try {\r\n      const responses = await Promise.all(\r\n        idsToFetchFromApi.map(id => fetch(`https://api.nbrb.by/exrates/rates/${id}`))\r\n      );\r\n\r\n      for (const response of responses) {\r\n        if (!response.ok) {\r\n          console.error(`HTTP error! status: ${response.status} for ${response.url}`);\r\n        }\r\n      }\r\n\r\n      const ratesData = await Promise.all(\r\n          responses.map(res => res.ok ? res.json() : Promise.resolve(null))\r\n      );\r\n      \r\n      // Добавляем полученные валюты в кеш\r\n      const newCachedRates = { ...cachedRatesData };\r\n      \r\n      setDisplayedCurrencies(prevCurrencies => {\r\n        const updatedCurrencies = prevCurrencies.map(currency => {\r\n          // Ищем информацию по этой валюте среди новых данных\r\n          const rateInfo = ratesData.find(rate => rate && rate.Cur_ID === currency.id);\r\n          if (rateInfo) {\r\n            const officialRate = rateInfo.Cur_OfficialRate;\r\n            const scale = currency.scale || rateInfo.Cur_Scale || 1;\r\n            const calculatedRate = (officialRate / scale).toFixed(4);\r\n            \r\n            // Сохраняем в объект кеша\r\n            newCachedRates[currency.id] = {\r\n              rate: calculatedRate,\r\n              scale: scale\r\n            };\r\n            \r\n            return {\r\n              ...currency,\r\n              rate: calculatedRate\r\n            };\r\n          }\r\n          return currency;\r\n        });\r\n        \r\n        // Сохраняем обновленный кеш\r\n        saveToCache(RATES_CACHE_KEY, newCachedRates);\r\n        \r\n        return updatedCurrencies;\r\n      });\r\n\r\n    } catch (e) {\r\n      console.error(\"Failed to fetch rates:\", e);\r\n      setRatesError('Не удалось загрузить курсы валют');\r\n    } finally {\r\n      setLoadingRates(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchRates(initialCurrencies);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // --- Загрузка данных погоды ---\r\n  useEffect(() => {\r\n    if (!OPENWEATHER_API_KEY || OPENWEATHER_API_KEY === 'ВАШ_КЛЮЧ_API_OpenWeatherMap_СЮДА') {\r\n      console.warn('Отсутствует ключ API OpenWeatherMap!');\r\n      setWeatherError('Отсутствует ключ API для погоды');\r\n      setLoadingWeather(false);\r\n      return;\r\n    }\r\n\r\n    const loadWeatherData = async () => {\r\n      setLoadingWeather(true);\r\n      setWeatherError(null);\r\n\r\n      // Для тестирования в Telegram Mini App сразу устанавливаем тестовые данные\r\n      if (isInTelegram()) {\r\n        console.log('Telegram WebApp: Устанавливаем тестовые значения для погоды');\r\n        const testWeatherData = [\r\n          {\r\n            label: \"Сегодня днем\",\r\n            temp: 18.5,\r\n            description: \"Переменная облачность\",\r\n            icon: \"03d\",\r\n          },\r\n          {\r\n            label: \"Сегодня вечером\",\r\n            temp: 14.2,\r\n            description: \"Ясно\",\r\n            icon: \"01n\",\r\n          },\r\n          {\r\n            label: \"Завтра утром\",\r\n            temp: 12.8,\r\n            description: \"Небольшой дождь\",\r\n            icon: \"10d\",\r\n          }\r\n        ];\r\n        \r\n        setWeatherData(testWeatherData);\r\n        setLoadingWeather(false);\r\n        return;\r\n      }\r\n\r\n      // Сначала проверяем кеш\r\n      const cachedWeatherData = getFromCache(WEATHER_CACHE_KEY, CACHE_DURATION.WEATHER);\r\n      if (cachedWeatherData) {\r\n        console.log('Загружены данные погоды из кеша');\r\n        setWeatherData(cachedWeatherData);\r\n        setLoadingWeather(false);\r\n        return;\r\n      }\r\n\r\n      // Если кеш пуст или устарел, делаем запрос к API\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${BREST_LAT}&lon=${BREST_LON}&appid=${OPENWEATHER_API_KEY}&units=metric`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Weather API error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        const processedData = processWeatherData(data);\r\n        \r\n        // Сохраняем в кеш и устанавливаем в состояние\r\n        saveToCache(WEATHER_CACHE_KEY, processedData);\r\n        setWeatherData(processedData);\r\n      } catch (e) {\r\n        console.error(\"Failed to fetch weather:\", e);\r\n        setWeatherError('Не удалось загрузить прогноз погоды');\r\n      } finally {\r\n        setLoadingWeather(false);\r\n      }\r\n    };\r\n\r\n    loadWeatherData();\r\n  }, []);\r\n\r\n  const handleOpenModal = () => setIsModalOpen(true);\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    \r\n    // Обновляем состояние кнопки в Telegram при закрытии модального окна\r\n    if (isTelegramApp) {\r\n      showMainButton('Добавить валюту', handleOpenModal);\r\n    }\r\n  };\r\n\r\n  const handleSelectCurrency = (selectedCurrency) => {\r\n    if (displayedCurrencies.length >= MAX_CARDS) {\r\n      alert(`Достигнуто максимальное количество карточек (${MAX_CARDS}).`);\r\n      return;\r\n    }\r\n    if (displayedCurrencies.some(c => c.id === selectedCurrency.Cur_ID)) {\r\n      alert(`${selectedCurrency.Cur_Abbreviation} уже отображается.`);\r\n      return;\r\n    }\r\n\r\n    const nextColorIndex = displayedCurrencies.length % colorPalette.length;\r\n    const newColor = colorPalette[nextColorIndex];\r\n    // Берем иконку из нашего предопределенного списка или ставим дефолтную\r\n    const currencyInfo = mainAvailableCurrencies.find(c => c.Cur_ID === selectedCurrency.Cur_ID);\r\n    const newIcon = currencyInfo?.icon || <FaQuestionCircle size={20} color=\"#fff\" />;\r\n\r\n    const newCurrencyEntry = {\r\n      id: selectedCurrency.Cur_ID,\r\n      code: selectedCurrency.Cur_Abbreviation,\r\n      rate: null,\r\n      color: newColor,\r\n      icon: newIcon,\r\n      scale: selectedCurrency.Cur_Scale || 1\r\n    };\r\n\r\n    const updatedCurrencies = [...displayedCurrencies, newCurrencyEntry];\r\n    setDisplayedCurrencies(updatedCurrencies);\r\n    // Запрашиваем курс только для новой валюты\r\n    fetchRates([newCurrencyEntry]); \r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleRemoveCard = (currencyIdToRemove) => {\r\n      if (displayedCurrencies.length <= 1) {\r\n          alert(\"Нельзя удалить последнюю карточку валюты.\");\r\n          return;\r\n      }\r\n    setDisplayedCurrencies(prev => prev.filter(c => c.id !== currencyIdToRemove));\r\n  };\r\n\r\n  const displayedCurrencyIds = useMemo(() => displayedCurrencies.map(c => c.id), [displayedCurrencies]);\r\n\r\n  // Обновляем основную кнопку Telegram при изменении списка валют\r\n  useEffect(() => {\r\n    if (isTelegramApp) {\r\n      // Если достигнут максимум карточек, меняем текст кнопки\r\n      if (displayedCurrencies.length >= MAX_CARDS) {\r\n        showMainButton('Достигнут максимум валют', () => {\r\n          // Можно показать уведомление или ничего не делать\r\n        });\r\n      } else {\r\n        showMainButton('Добавить валюту', handleOpenModal);\r\n      }\r\n    }\r\n  }, [displayedCurrencies, isTelegramApp]);\r\n\r\n  return (\r\n    <div className={styles.homePage}>\r\n      <Header />\r\n      \r\n      {isTelegramApp && (\r\n        <div style={{ padding: '10px', backgroundColor: '#f0f0f0', margin: '0 10px 10px', borderRadius: '8px', fontSize: '12px' }}>\r\n          <p style={{ margin: '0', fontWeight: 'bold' }}>Отладочная информация:</p>\r\n          <p style={{ margin: '3px 0' }}>Telegram Mini App: Активно</p>\r\n          <p style={{ margin: '3px 0' }}>Валюты: {displayedCurrencies.length} (загрузка: {loadingRates ? 'да' : 'нет'})</p>\r\n          <p style={{ margin: '3px 0' }}>Погода: {weatherData.length} записей (загрузка: {loadingWeather ? 'да' : 'нет'})</p>\r\n          {ratesError && <p style={{ margin: '3px 0', color: 'red' }}>Ошибка курсов: {ratesError}</p>}\r\n          {weatherError && <p style={{ margin: '3px 0', color: 'red' }}>Ошибка погоды: {weatherError}</p>}\r\n        </div>\r\n      )}\r\n\r\n      <section className={styles.section}>\r\n        <h2 className={styles.sectionTitle}>Курсы валют</h2>\r\n        <p className={styles.sectionSubtitle}>Официальные курсы НБРБ</p>\r\n        <div className={styles.subjectsGrid}>\r\n          {ratesError && <p style={{ color: 'red' }}>{ratesError}</p>}\r\n          \r\n          {displayedCurrencies.map((currency) => (\r\n            <SubjectCard\r\n              key={currency.id}\r\n              title={`${currency.code} / BYN`}\r\n              rate={currency.rate === null ? '...' : `1 ${currency.code} = ${currency.rate} BYN`}\r\n              icon={currency.icon} \r\n              color={currency.color}\r\n              onRemove={() => handleRemoveCard(currency.id)}\r\n            />\r\n          ))}\r\n          \r\n          {displayedCurrencies.length < MAX_CARDS && (\r\n            <AddCurrencyCard onClick={handleOpenModal} />\r\n          )}\r\n        </div>\r\n      </section>\r\n\r\n      <section className={`${styles.section} ${styles.weatherSection}`}>\r\n        <h2 className={styles.sectionTitle}>Прогноз погоды</h2>\r\n        <p className={styles.sectionSubtitle}>Брест, Беларусь</p>\r\n        {loadingWeather && <p>Загрузка погоды...</p>}\r\n        {weatherError && <p style={{ color: 'red' }}>{weatherError}</p>}\r\n        {!loadingWeather && !weatherError && (\r\n          <div style={{ paddingLeft: '15px', paddingRight: '15px' }}>\r\n            <WeatherForecast forecastData={weatherData} />\r\n          </div>\r\n        )}\r\n      </section>\r\n\r\n      <CurrencyModal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        onSelectCurrency={handleSelectCurrency}\r\n        // Передаем наш предопределенный список\r\n        availableCurrencies={mainAvailableCurrencies} \r\n        displayedCurrencyIds={displayedCurrencyIds}\r\n        // Убрали isLoading и error, т.к. список статичный\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage; "],"names":["Header","_jsx","className","styles","children","FaSearch","size","color","_ref","title","icon","rate","onRemove","_jsxs","style","backgroundColor","onClick","FaEllipsisH","FaPlus","isOpen","onClose","onSelectCurrency","availableCurrencies","displayedCurrencyIds","isLoading","error","searchTerm","setSearchTerm","useState","filteredCurrencies","useMemo","filter","currency","includes","Cur_ID","Cur_Name","toLowerCase","Cur_Abbreviation","sort","a","b","localeCompare","e","stopPropagation","FaTimes","type","placeholder","value","onChange","target","length","map","getWeatherIconUrl","iconCode","periodLabel","temperature","description","translatedDescription","englishDescription","translatedPeriod","label","src","alt","Math","round","forecastData","period","index","WeatherCard","temp","mainAvailableCurrencies","Cur_Scale","FaDollarSign","FaEuroSign","FaRubleSign","FaQuestionCircle","FaYenSign","FaPoundSign","initialCurrencies","c","id","code","scale","find","colorPalette","OPENWEATHER_API_KEY","WEATHER_CACHE_KEY","RATES_CACHE_KEY","CACHE_DURATION","saveToCache","key","data","cacheItem","timestamp","Date","now","localStorage","setItem","JSON","stringify","console","warn","getFromCache","maxAge","cachedData","getItem","parse","removeItem","HomePage","displayedCurrencies","setDisplayedCurrencies","loadingRates","setLoadingRates","ratesError","setRatesError","isModalOpen","setIsModalOpen","weatherData","setWeatherData","loadingWeather","setLoadingWeather","weatherError","setWeatherError","isTelegramApp","setIsTelegramApp","useEffect","telegramAvailable","isInTelegram","showMainButton","handleOpenModal","hideMainButton","fetchRates","useCallback","async","currenciesToFetch","log","testRates","prevCurrencies","_testRates$currency$i","idsToFetch","cachedRatesData","idsToFetchFromApi","forEach","push","Object","keys","responses","Promise","all","fetch","response","ok","status","url","ratesData","res","json","resolve","newCachedRates","updatedCurrencies","rateInfo","officialRate","Cur_OfficialRate","calculatedRate","toFixed","cachedWeatherData","Error","processedData","apiData","list","todayStr","toISOString","split","tomorrow","setDate","getDate","tomorrowStr","periods","todayMorning","range","date","todayDay","todayNight","tomorrowMorning","tomorrowDay","tomorrowNight","item","itemDate","dt","itemDateStr","itemHour","getHours","values","_representativeItem$w","_representativeItem$w2","avgTemp","reduce","sum","main","representativeItem","floor","weather","charAt","toUpperCase","slice","Boolean","processWeatherData","loadWeatherData","handleCloseModal","padding","margin","borderRadius","fontSize","fontWeight","SubjectCard","handleRemoveCard","currencyIdToRemove","alert","prev","AddCurrencyCard","paddingLeft","paddingRight","WeatherForecast","CurrencyModal","selectedCurrency","some","nextColorIndex","newColor","currencyInfo","newIcon","newCurrencyEntry"],"sourceRoot":""}